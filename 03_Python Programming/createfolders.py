import os

# Directory where the folders will be created
base_dir = r"C:\\_Amrita\\MAD_V2\\EXP\\Computational-Problem-Solving\\03_Python Programming"

# List of topics
topics = [
    "Getting Started with Python",
    "What is Python",
    "Installing Python",
    "Python Interpreter",
    "Code Editors",
    "Your First Python Program",
    "Python Extension",
    "Linting Python Code",
    "Formatting Python Code",
    "Running Python Code",
    "Python Implementations",
    "How Python Code is Executed",
    "Primitive Types",
    "Variables",
    "Variable Names",
    "Strings",
    "Escape Sequences",
    "Formatted Strings",
    "String Methods",
    "Numbers",
    "Working with Numbers",
    "Type Conversion",
    "Control Flow",
    "Comparison Operators",
    "Conditional Statements",
    "Ternary Operator",
    "Logical Operators",
    "Short-Circuit Evaluation",
    "Chaining Comparison Operators",
    "For Loops",
    "If..Else",
    "Nested Loops",
    "Iterables",
    "While Loops",
    "Infinite Loops",
    "Functions",
    "Defining Functions",
    "Arguments",
    "Types of Functions",
    "Keyword Arguments",
    "Default Arguments",
    "*args",
    "**kwargs",
    "Scope",
    "Data Structures",
    "Lists",
    "Accessing Items",
    "List Unpacking",
    "Looping over Lists",
    "Adding or Removing Items",
    "Finding Items",
    "Sorting Lists",
    "Lambda Functions",
    "Map Function",
    "Filter Function",
    "List Comprehensions",
    "Zip Function",
    "Stacks",
    "Queues",
    "Tuples",
    "Swapping Variables",
    "Arrays",
    "Sets",
    "Dictionaries",
    "Dictionary Comprehensions",
    "Generator Expressions",
    "Unpacking Operator",
    "Exceptions",
    "Handling Exceptions",
    "Handling Different Exceptions",
    "Cleaning Up",
    "The With Statement",
    "Raising Exceptions",
    "Cost of Raising Exceptions",
    "Classes",
    "Creating Classes",
    "Constructors",
    "Class vs Instance Attributes",
    "Class vs Instance Methods",
    "Magic Methods",
    "Comparing Objects",
    "Performing Arithmetic Operations",
    "Making Custom Containers",
    "Private Members",
    "Properties",
    "Inheritance",
    "The Object Class",
    "Method Overriding",
    "Multiple Inheritance",
    "A Good Example of Inheritance",
    "Abstract Base Classes",
    "Polymorphism",
    "Duck Typing",
    "Extending Built-in Types",
    "Data Classes",
    "Modules",
    "Creating Modules",
    "Compiled Python Files",
    "Module Search Path",
    "Packages",
    "Subpackages",
    "Intrapackage References",
    "The dir Function",
    "Executing Modules as Scripts",
    "Python Standard Library",
    "Working With Paths",
    "Working with Directories",
    "Working with Files",
    "Working with Zip Files",
    "Working with CSV Files",
    "Working with JSON Files",
    "Working with a SQLite Database",
    "Working with Timestamps",
    "Working with DateTimes",
    "Working with Time Deltas",
    "Generating Random Values",
    "Opening the Browser",
    "Sending Emails",
    "Templates",
    "Command-Line Arguments",
    "Running External Programs",
    "Building Web Applications with Django",
    "Introduction",
    "Your First Django Project",
    "Your First App",
    "Views",
    "Models",
    "Migrations",
    "Changing the Models",
    "Admin",
    "Customizing the Admin",
    "Database Abstraction API",
    "Templates",
    "Adding Bootstrap",
    "Customizing the Layout",
    "Sharing a Template Across Multiple Apps",
    "Url Parameters",
    "Getting a Single Object",
    "Raising 404 Errors",
    "Referencing Urls",
    "Creating APIs",
    "Adding the Homepage",
    "Getting Ready to Deploy",
    "Deployment",
    "What is Machine Learning",
    "Machine Learning in Action",
    "Libraries and Tools",
    "Importing a Data Set",
    "Jupyter Shortcuts",
    "A Real Machine Learning Problem",
    "Preparing the Data",
    "Learning and Predicting",
    "Calculating the Accuracy",
    "Persisting Models",
    "Visualizing a Decision Tree"
]

# Create folders with numbered prefixes
for i, topic in enumerate(topics, start=1):
    folder_name = f"{i:02d}_{topic}"
    folder_path = os.path.join(base_dir, folder_name)
    os.makedirs(folder_path, exist_ok=True)
    print(f"Created folder: {folder_path}")
